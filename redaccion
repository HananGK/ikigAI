 Lo que amas: Informática, programación, novedades en tecnología. En qué eres bueno: Resolución de problemas, trabajo en equipo, disciplina. Lo que el mundo necesita: Desarrollo digital, educación en temas de internet y tecnología. Por lo que te pueden pagar: Desarrollo de software, desarrollo de aplicaciones. 




--------------------------------------------------------------------------------------------------------------------------



import Image from 'next/image'
import amas from '../Icons/amas.svg'
import bueno from '../Icons/bueno.svg'
import mundo from '../Icons/mundo.svg'
import pagarte from '../Icons/pagarte.svg'
import { useEffect, useRef, useState } from 'react'
import { Transition } from '@headlessui/react'

const items = [
    {
        title: "1. Lo que amas",
        description: "¿Cuáles son tus pasiones? ¿Qué actividades te entusiasma hacer?",
        buttonIcon: amas,
        placeholder: "Ej: La música, tocar el oboe, ...",
        text: "1"
    },
    {
        title: "2. En qué eres bueno",
        description: "¿Qué haces bien? ¿Cuáles son tus habilidades y talentos?",
        buttonIcon: bueno,
        placeholder: "Ej: Organizar mi tiempo, tener una relación asertiva con las personas, ...",
        text: "2"
    },
    {
        title: "3. Lo que el mundo necesita",
        description: "¿Qué problemas ves en el mundo que te gustaría ayudar a resolver?",
        buttonIcon: mundo,
        placeholder: "Ej: Incentivar la música en los jóvenes, cuidar las áreas verdes, ...",
        text: "3"
    },
    {
        title: "4. Por lo que te pueden pagar",
        description: "¿Qué trabajos o servicios estarías dispuesto a realizar a cambio de una remuneración?",
        buttonIcon: pagarte,
        placeholder: "Ej: Dar conciertos con una orquesta, dar clases de música, ...",
        text: "4"
    },
]


export default function QuestionsSlider({setsList = items}) {

    const itemsRef = useRef<HTMLDivElement>(null)
    const [active, setActive] = useState<number>(0)

    const heightFix = () => {
        if (itemsRef.current && itemsRef.current.parentElement) {
            itemsRef.current.parentElement.style.height = `${itemsRef.current.clientHeight}px`
        }
    }
    
    useEffect(() => {
        heightFix()
    }, [])

    const [state, setState] = useState(setsList)

    const handleChange = (e: any, i: number) => {
        const {value, text} = e.target

        const newState = [...state]
        newState[i] = {
            ...newState[i],
            [text]: value
        }
        
        console.log(newState)
        setState(newState)
    }

    return (
        <div className='flex flex-col gap-8'>
            <div className='flex gap-4 justify-center'>
                {items.map((item, index) => (
                    <button
                        key={index}
                        className='p-4 rounded-full h-[140px] w-[140px] border border-gray-300 flex flex-col gap-2 items-center justify-center focus:ring-2 focus:outline-none focus:ring-black group bg-gradient-to-br from-[#D661FF] to-[#5DF5E8] group-hover:from-[#D661FF] group-hover:to-[#5DF5E8] active:from-[#5df5e8] active:to-[#d661ff] font-semibold opacity-80'
                        onClick={() => { setActive(index) }}
                    >
                        <span className={`text-center flex flex-col items-center opacity-100 ${active === index ? '' : 'opacity-50 group-hover:opacity-100 group-focus:opacity-100 transition-opacity'}`}>
                            <Image src={item.buttonIcon} alt={item.title}></Image>
                            <p>{item.title}</p>
                        </span>
                        

                    </button>
                ))}

            </div>

            <div className='transition-all duration-150 delay-300 ease-in-out'>

                <div className='relative p-2 rounded-md flex flex-col w-[80%] mx-auto' ref={itemsRef}>
                    {state.map((item, index) => (
                        <Transition
                            key={index}
                            show={active === index}
                            beforeEnter={() => heightFix()}
                            enter="transition ease-in-out duration-500 delay-200 order-first"
                            enterFrom="opacity-50 scale-105"
                            enterTo="opacity-100 scale-100"
                            leave="transition ease-in-out duration-300 absolute"
                            leaveFrom="opacity-100 scale-100"
                            leaveTo="opacity-0 scale-95" 
                        >
                            <div className='flex flex-col gap-4 bg-white p-4 w-full rounded-md before:absolute before:w-full before:h-full before:-z-10 before:bg-gradient-to-r before:from-[#5DF5E8] before:to-[#D661FF] before:left-0 before:top-0 before:blur-[5px]'>
                                <label htmlFor={item.title}>{item.description}</label>
                                <input id={item.title} name={item.title} type="text" required placeholder={item.placeholder} defaultValue={item.text} onChange={(e) => {handleChange(e, index); item.text=e.target.value }} className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:outline-none focus:ring-gray-500"/>
                            </div>
                        </Transition>
                        
                    ))}
                    
                </div>
            </div>
        </div>
    )

}


